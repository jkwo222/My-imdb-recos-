name: feedback

on:
  # Fire when someone reacts to a comment (üëç/üëé on the per-title comments)
  reaction:
    types: [created, deleted]
  # Manual trigger just in case
  workflow_dispatch:

permissions:
  contents: write   # required to commit feedback.json
  issues: read      # read issue/comment context

concurrency:
  group: feedback
  cancel-in-progress: false

jobs:
  record:
    runs-on: ubuntu-24.04
    env:
      # Where we store feedback so nightly can learn from it
      FEEDBACK_JSON_PATH: data/user/feedback.json

    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update feedback.json from reaction
        id: update
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const core = require('@actions/core');

            const payload = context.payload;
            const reaction = payload.reaction;
            if (!reaction) {
              core.info('No reaction object; nothing to do.');
              return;
            }

            const content = reaction.content;     // "+1", "-1", "heart", etc.
            const action  = payload.action;       // "created" | "deleted"
            const issue   = payload.issue;
            const comment = payload.comment;

            if (!issue || !comment) {
              core.info('Reaction is not on an issue comment; skipping.');
              return;
            }

            // Only handle our per-title comments that include the marker:
            // <!-- reco:tt1234567 --> or <!-- reco:tm:999999 -->
            const body = comment.body || '';
            const m = /<!--\s*reco:([^\s>]+)\s*-->/.exec(body);
            if (!m) {
              core.info('No reco marker found in the reacted comment; skipping.');
              return;
            }
            const key = m[1]; // e.g., "tt1234567" or "tm:999999"
            core.info(`Marker: ${key}; reaction: ${content}; action: ${action}`);

            // Map GitHub reaction to our counters
            let upDelta = 0, downDelta = 0;
            if (content === '+1')  upDelta   = (action === 'deleted' ? -1 : 1);
            if (content === '-1')  downDelta = (action === 'deleted' ? -1 : 1);
            if (!upDelta && !downDelta) {
              core.info('Irrelevant reaction (not üëç/üëé); skipping.');
              return;
            }

            const fp  = process.env.FEEDBACK_JSON_PATH || 'data/user/feedback.json';
            const dir = path.dirname(fp);
            fs.mkdirSync(dir, { recursive: true });

            // Load existing feedback (if any)
            let data = { items: {}, updated_at: null };
            try {
              const raw = fs.readFileSync(fp, 'utf8');
              data = JSON.parse(raw);
              if (!data || typeof data !== 'object') throw new Error('bad json');
            } catch {
              // fresh file
            }

            const items = (data.items ||= {});
            const entry = (items[key] ||= { up: 0, down: 0, history: [] });

            entry.up   = Math.max(0, (entry.up   || 0) + upDelta);
            entry.down = Math.max(0, (entry.down || 0) + downDelta);
            entry.history.push({
              ts: new Date().toISOString(),
              action,
              reaction: content,
              issue_number: issue.number,
              comment_id: comment.id
            });

            data.updated_at = new Date().toISOString();
            fs.writeFileSync(fp, JSON.stringify(data, null, 2));
            core.setOutput('changed', 'true');

      - name: Commit feedback.json
        if: steps.update.outputs.changed == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feedback: update feedback.json from reactions"
          file_pattern: "data/user/feedback.json"