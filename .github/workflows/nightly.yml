name: nightly

on:
  schedule:
    - cron: '30 7 * * *'   # 07:30 UTC (3:30am ET)
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      REGION: US
      ORIGINAL_LANGS: '["en"]'
      SUBS_INCLUDE: netflix,prime_video,hulu,max,disney_plus,apple_tv_plus,peacock,paramount_plus
      DISCOVER_PAGES: "12"

      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      TMDB_BEARER:  ${{ secrets.TMDB_ACCESS_TOKEN }}
      IMDB_USER_ID: ${{ secrets.IMDB_USER_ID }}

      NOTIFY_USER: ${{ vars.NOTIFY_USER }}
      # bump this to invalidate old caches
      POOL_CACHE_VERSION: v1

      # pool behavior knobs (already supported by code)
      POOL_MAX_ITEMS: "20000"
      # POOL_PRUNE_AT: "200000"
      # POOL_PRUNE_KEEP: "150000"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      # NEW: restore the last saved cache (pool + tmdb)
      - name: Restore pool/tmdb caches
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            data/cache/pool
            data/cache/tmdb
          key: pool-${{ runner.os }}-${{ env.REGION }}-${{ env.POOL_CACHE_VERSION }}-${{ github.run_id }}
          restore-keys: |
            pool-${{ runner.os }}-${{ env.REGION }}-${{ env.POOL_CACHE_VERSION }}-

      - name: Run engine
        run: |
          mkdir -p data/out data/cache
          python -m engine.runner

      - name: Build digest summary
        run: |
          python -m engine.summarize \
            --in "data/out/latest/items.enriched.json" \
            --diag "data/out/latest/diag.json" \
            --ratings "data/user/ratings.csv" \
            --out "data/out/latest/summary.md" \
            --top 12

      - name: Make debug bundle
        run: bash ./.github/scripts/make_debug_bundle.sh

      - name: Post/update Daily Recommendations issue + comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const title = 'Daily Recommendations';
            let body = '';
            try { body = fs.readFileSync('data/out/latest/summary.md', 'utf8'); }
            catch { body = 'No summary.md found. Check debug bundle.'; }
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: 'daily-recos', per_page: 100
            });
            let issue = issues.find(i => i.title === title);
            if (!issue) {
              issue = (await github.rest.issues.create({ owner, repo, title, body, labels: ['daily-recos'] })).data;
            } else {
              await github.rest.issues.update({ owner, repo, issue_number: issue.number, body });
            }
            const mention = process.env.NOTIFY_USER ? ` cc @${process.env.NOTIFY_USER}` : '';
            await github.rest.issues.createComment({
              owner, repo, issue_number: issue.number,
              body: `Daily digest posted.${mention}\n\n` + body
            });

      - name: Upload debug bundle
        uses: actions/upload-artifact@v4
        with:
          name: debug-data
          path: debug-data.zip
          if-no-files-found: warn

      - name: Upload repo snapshot
        uses: actions/upload-artifact@v4
        with:
          name: repo-snapshot
          path: repo-snapshot.zip
          if-no-files-found: warn

      - name: Upload latest outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latest-run
          if-no-files-found: ignore
          path: |
            data/out/latest/runner.log
            data/out/latest/assistant_feed.json
            data/out/latest/items.discovered.json
            data/out/latest/items.enriched.json
            data/out/latest/summary.md
            data/out/latest/diag.json

      # NEW: save the updated cache with a unique key for this run
      - name: Save pool/tmdb caches
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            data/cache/pool
            data/cache/tmdb
          key: pool-${{ runner.os }}-${{ env.REGION }}-${{ env.POOL_CACHE_VERSION }}-${{ github.run_id }}