# FILE: .github/workflows/nightly.yml
name: Nightly Recommendations

on:
  schedule:
    # ~12:15am US/Eastern (04:15 UTC) — adjust as needed
    - cron: '15 4 * * *'
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: nightly-recos
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare dirs
        run: |
          mkdir -p data/cache data/debug data/out/latest

      - name: Run engine
        id: run_engine
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
          IMDB_USER_ID: ${{ secrets.IMDB_USER_ID }}
          IMDB_RATINGS_CSV_PATH: data/ratings.csv
          REGION: US
          ORIGINAL_LANGS: en
          SUBS_INCLUDE: netflix,prime_video,hulu,max,disney_plus,apple_tv_plus,peacock,paramount_plus
          TMDB_PAGES_MOVIE: 24
          TMDB_PAGES_TV: 24
          MAX_CATALOG: 10000
          INCLUDE_TV_SEASONS: true
          SKIP_WINDOW_DAYS: 4
        run: |
          set -o pipefail
          python -m engine.runner 2>&1 | tee data/debug/runner.log

      - name: Upload artifacts (latest feed + logs)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-output
          path: |
            data/out/latest/assistant_feed.json
            data/debug/runner.log
          if-no-files-found: ignore

      - name: Prepare email subject/body
        id: email
        run: |
          FEED="data/out/latest/assistant_feed.json"
          SUBJ="Nightly Recommendations: run complete"
          BODY="<p>Nightly engine run completed.</p>"
          if [ -f "$FEED" ]; then
            POOL=$(jq -r '.telemetry.counts.tmdb_pool // 0' "$FEED")
            UNSEEN=$(jq -r '.telemetry.counts.eligible_unseen // 0' "$FEED")
            SHORT=$(jq -r '.telemetry.counts.shortlist // 0' "$FEED")
            SHOWN=$(jq -r '.telemetry.counts.shown // 0' "$FEED")
            SUBJ="Nightly Recos • Pool ${POOL} • Unseen ${UNSEEN} • Shown ${SHOWN}"
            # Top 10 compact table
            echo "<h3>Top 10</h3><table border='1' cellpadding='6' cellspacing='0'><tr><th>#</th><th>Title</th><th>Year</th><th>Type</th><th>Match</th></tr>" > email.html
            jq -r '.top10[] | "<tr><td>\(.rank)</td><td>\(.title | gsub("&";"&amp;"))</td><td>\(.year // "")</td><td>\(.type)</td><td>\(.match)</td></tr>"' "$FEED" >> email.html
            echo "</table>" >> email.html
            BODY="<p>Pool: <b>${POOL}</b> • Unseen: <b>${UNSEEN}</b> • Shortlist: <b>${SHORT}</b> • Shown: <b>${SHOWN}</b></p>$(cat email.html)"
          fi
          echo "subject=${SUBJ}" >> "$GITHUB_OUTPUT"
          printf "%s" "$BODY" > body.html

      - name: Send email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ steps.email.outputs.subject }}
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          content_type: text/html
          body_file: body.html
          attachments: |
            data/out/latest/assistant_feed.json