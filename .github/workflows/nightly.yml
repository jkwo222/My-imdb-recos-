name: nightly

on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"  # run daily at 03:17 UTC (change as you like)

concurrency:
  group: nightly-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # —— engine configuration ——
      IMDB_USER_ID: ${{ secrets.IMDB_USER_ID }}          # e.g. ur18684433
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}          # v4 bearer token OR v3 key
      OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
      IMDB_RATINGS_CSV_PATH: data/ratings.csv           # your uploaded CSV
      TMDB_PAGES_MOVIE: 5
      TMDB_PAGES_TV: 5
      INCLUDE_TV_SEASONS: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restore engine caches
        uses: actions/cache@v4
        with:
          path: |
            data/cache
            data/catalog
            data/seen_index_v3.json
            data/weights_live.json
          key: engine-${{ runner.os }}-py${{ steps.py.outputs.python-version }}-${{ hashFiles('requirements.txt', 'engine/**/*.py') }}-${{ hashFiles('data/ratings.csv') }}
          restore-keys: |
            engine-${{ runner.os }}-py${{ steps.py.outputs.python-version }}-
            engine-${{ runner.os }}-

      # (Optional) sanity check your ratings CSV exists & is readable
      # - name: Debug CSV presence
      #   run: |
      #     ls -la data || true
      #     head -n 5 data/ratings.csv || true

      - name: Run engine
        run: python -m engine.runner

      - name: Summarize results → summary.md
        id: summarize
        run: |
          python - << 'PY'
          import os, json, datetime, pathlib
          d = datetime.date.today().isoformat()
          out_dir = pathlib.Path(f"data/out/daily/{d}")
          recs = json.load(open(out_dir/"recs.json","r"))
          tel  = json.load(open(out_dir/"telemetry.json","r"))
          top = recs.get("recs", [])[:10]
          weights = recs.get("weights", {})
          run_url = f"https://github.com/{os.environ.get('GITHUB_REPOSITORY')}/actions/runs/{os.environ.get('GITHUB_RUN_ID')}"
          lines = []
          lines.append(f"Run: {run_url}")
          lines.append("")
          if top:
              lines.append("**Top 10**")
              for i, r in enumerate(top, 1):
                  title = r.get("title","")
                  year = r.get("year","")
                  typ  = r.get("type","")
                  match= r.get("match","")
                  lines.append(f"{i:2d}. {match} — {title} ({year}) [{typ}]")
          else:
              lines.append("**Top 10**\n(no results)")

          lines.append("")
          lines.append(f"**Telemetry**: pool={tel.get('eligible_unseen',0)}, considered={tel.get('considered',0)}, shortlist={tel.get('shortlist',0)}, shown={tel.get('shown',0)}")
          if weights:
              lines.append(f"**Weights**: critic={weights.get('critic_weight',0):.2f}, audience={weights.get('audience_weight',0):.2f}")
          lines.append("")
          lines.append("This product uses the TMDB API but is not endorsed or certified by TMDB.")
          md = "\n".join(lines)
          open("summary.md","w",encoding="utf-8").write(md)
          # surface outputs
          print(f"::set-output name=outdir::{out_dir}")
          print(f"::set-output name=summary_file::summary.md")
          PY
        shell: bash

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: engine-output-${{ github.run_id }}
          path: ${{ steps.summarize.outputs.outdir }}

      - name: Create issue with results (push notification)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('${{ steps.summarize.outputs.summary_file }}', 'utf8');
            const title = `Run ${new Date().toISOString().slice(0,10)} — Top picks`;
            const res = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
            core.info(`Issue created: ${res.data.html_url}`);