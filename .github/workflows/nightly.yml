# FILE: .github/workflows/nightly.yml
name: Nightly Recommendations

on:
  schedule:
    # ~12:15am US/Eastern (04:15 UTC). Adjust if you want.
    - cron: '15 4 * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write   # needed to post/update the nightly issue comment

concurrency:
  group: nightly-recos
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare dirs
        run: |
          mkdir -p data/cache data/debug data/out/latest

      - name: Run engine
        id: run_engine
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
          IMDB_USER_ID: ${{ secrets.IMDB_USER_ID }}
          IMDB_RATINGS_CSV_PATH: data/ratings.csv
          REGION: US
          ORIGINAL_LANGS: en
          SUBS_INCLUDE: netflix,prime_video,hulu,max,disney_plus,apple_tv_plus,peacock,paramount_plus
          TMDB_PAGES_MOVIE: 24
          TMDB_PAGES_TV: 24
          MAX_CATALOG: 10000
          INCLUDE_TV_SEASONS: true
          SKIP_WINDOW_DAYS: 4
        run: |
          set -o pipefail
          python -m engine.runner 2>&1 | tee data/debug/runner.log

      - name: Upload artifacts (latest feed + logs)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-output
          path: |
            data/out/latest/assistant_feed.json
            data/debug/runner.log
          if-no-files-found: ignore

      - name: Build markdown summary
        id: mk
        run: |
          FEED="data/out/latest/assistant_feed.json"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          DATE_UTC="$(date -u +'%Y-%m-%d %H:%M UTC')"

          echo "# Nightly Recommendations — ${DATE_UTC}" > summary.md
          if [ -f "$FEED" ]; then
            POOL=$(jq -r '.telemetry.counts.tmdb_pool // 0' "$FEED")
            UNSEEN=$(jq -r '.telemetry.counts.eligible_unseen // 0' "$FEED")
            SHORT=$(jq -r '.telemetry.counts.shortlist // 0' "$FEED")
            SHOWN=$(jq -r '.telemetry.counts.shown // 0' "$FEED")
            echo "" >> summary.md
            echo "**Pool:** ${POOL}  •  **Unseen:** ${UNSEEN}  •  **Shortlist:** ${SHORT}  •  **Shown:** ${SHOWN}" >> summary.md
            echo "" >> summary.md
            echo "## Top 10" >> summary.md
            echo "" >> summary.md
            echo "| # | Title | Year | Type | Match |" >> summary.md
            echo "|---:|---|---:|---|---:|" >> summary.md
            jq -r '.top10[] | "| \(.rank) | \(.title|gsub("\\|";"\\|")) | \(.year//"") | \(.type) | \(.match) |"' "$FEED" >> summary.md
            echo "" >> summary.md
            echo "_Run logs & artifacts:_ ${RUN_URL}" >> summary.md
          else
            echo "" >> summary.md
            echo "> No assistant_feed.json produced this run. See logs: ${RUN_URL}" >> summary.md
          fi

      - name: Post/update Issue (triggers GitHub email)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const title = 'Nightly Recommendations';
            const body = fs.readFileSync('summary.md', 'utf8');

            // Find an existing issue with this exact title
            const {owner, repo} = context.repo;
            const issues = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100
            });
            let issue = issues.data.find(i => i.title === title);

            // Create the container issue once if it doesn't exist
            if (!issue) {
              const created = await github.rest.issues.create({
                owner, repo, title,
                body: 'This issue will collect nightly recommendation summaries.'
              });
              issue = created.data;
            }

            // Add a new comment each run — this generates a notification email
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: issue.number,
              body
            });