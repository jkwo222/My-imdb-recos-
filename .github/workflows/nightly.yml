name: nightly

on:
  schedule:
    - cron: '30 7 * * *'   # 07:30 UTC (3:30am ET)
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  build:
    runs-on: ubuntu-24.04

    env:
      # Core config
      REGION: US
      ORIGINAL_LANGS: '["en"]'
      # Only list the services you actually have
      SUBS_INCLUDE: apple_tv_plus,netflix,max,paramount_plus,disney_plus,peacock,hulu
      DISCOVER_PAGES: "16"                # can tune; more pages => more growth

      # >>> Rotating discovery (new) <<<
      DISCOVER_PAGING_MODE: "rolling"     # first | rolling | random
      DISCOVER_PAGE_MAX: "200"

      # >>> IMDb TSV ingest (new) <<<
      IMDB_TSV_ENABLE: "true"
      IMDB_TSV_RECENT_YEARS: "2000"
      IMDB_TSV_MIN_VOTES: "5000"
      IMDB_TSV_MAX_TITLES: "150000"
      IMDB_TSV_MAX_MAP: "2000"

      # TMDB auth (runner accepts either v3 or v4)
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      TMDB_BEARER:  ${{ secrets.TMDB_ACCESS_TOKEN }}

      # IMDb (CSV expected at data/user/ratings.csv)
      IMDB_USER_ID: ${{ secrets.IMDB_USER_ID }}
      IMDB_PUBLIC_MAX_PAGES: "10"

      # Enrichment knobs
      ENRICH_PROVIDERS_TOP_N: "220"
      ENRICH_SCORING_TOP_N: "260"
      ENRICH_EXTERNALIDS_EXCL_TOP_N: "800"
      ENRICH_PROVIDERS_FINAL_TOP_N: "50"
      ENRICH_EXTERNALIDS_TOP_N: "60"

      # Profile model knobs
      AFFINITY_K: "5"
      DECAY_HALF_LIFE_DAYS: "270"

      # Scoring blend knobs
      AUDIENCE_PRIOR_LAMBDA: "0.3"
      PROVIDER_PREF_LAMBDA: "0.5"

      # Anime / Kids penalties
      PENALIZE_KIDS: "true"
      PENALIZE_ANIME: "true"
      KIDS_CARTOON_PENALTY: "25"
      ANIME_PENALTY: "35"                  # slightly stronger to keep anime out of email

      # TV commitment penalty (smarter thresholds)
      COMMITMENT_ENABLED: "true"
      COMMITMENT_UNSEEN_THRESHOLD: "1"     # start penalizing after S1 if you haven't watched it
      COMMITMENT_SEEN_THRESHOLD: "4"       # be kinder on shows you already follow
      COMMITMENT_SEASON_PENALTY: "3"
      COMMITMENT_MAX_PENALTY: "18"

      # Recency boosts
      RECENCY_MOVIE_WINDOW_DAYS: "270"
      RECENCY_MOVIE_BONUS_MAX: "10"
      RECENCY_TV_FIRST_WINDOW: "180"
      RECENCY_TV_FIRST_BONUS_MAX: "8"
      RECENCY_TV_LAST_WINDOW: "120"
      RECENCY_TV_LAST_BONUS_MAX: "10"
      RECENCY_TV_FOLLOWUP_BONUS_MAX: "6"
      RECENCY_PROVIDER_MULTIPLIER: "1.15"

      # Email layout & gating (split 10/10 + telemetry + labels; hide anime in email)
      EMAIL_TOP_MOVIES: "10"
      EMAIL_TOP_TV: "10"
      EMAIL_SCORE_MIN: "62"
      EMAIL_INCLUDE_TELEMETRY: "true"
      EMAIL_EXCLUDE_ANIME: "true"
      EMAIL_INCLUDE_NEW_MOVIE_LABEL: "true"
      EMAIL_INCLUDE_NEW_SEASON_LABEL: "true"
      EMAIL_INCLUDE_NEW_SERIES_LABEL: "true"

      # Optional @mention for notifications
      NOTIFY_USER: ${{ vars.NOTIFY_USER }}

      # Pool growth & caching
      POOL_CACHE_VERSION: v1
      POOL_MAX_ITEMS: "50000"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      # Restore persistent caches so the pool truly grows
      - name: Restore pool/tmdb caches
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            data/cache/pool
            data/cache/tmdb
          key: pool-${{ runner.os }}-${{ env.REGION }}-${{ env.POOL_CACHE_VERSION }}-${{ github.run_id }}
          restore-keys: |
            pool-${{ runner.os }}-${{ env.REGION }}-${{ env.POOL_CACHE_VERSION }}-

      - name: Ensure debug scripts executable
        run: |
          chmod +x ./.github/scripts/make_debug_bundle.sh || true
          chmod +x ./.github/scripts/collect_diag.py || true

      - name: Run engine
        run: |
          mkdir -p data/out data/cache
          python -m engine.runner

      - name: Make debug bundle (full + compact snapshot)
        run: bash ./.github/scripts/make_debug_bundle.sh

      - name: Upload compact debug snapshot
        uses: actions/upload-artifact@v4
        with:
          name: debug-snapshot
          path: debug-snapshot.zip
          if-no-files-found: warn

      - name: Create repo snapshot (current code)
        run: git archive -o repo-snapshot.zip HEAD

      - name: Upload repo snapshot
        uses: actions/upload-artifact@v4
        with:
          name: repo-snapshot
          path: repo-snapshot.zip
          if-no-files-found: warn

      - name: Upload full debug bundle
        uses: actions/upload-artifact@v4
        with:
          name: debug-data
          path: debug-data.zip
          if-no-files-found: warn

      - name: Upload latest outputs (convenience)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latest-run
          if-no-files-found: ignore
          path: |
            data/out/latest/runner.log
            data/out/latest/assistant_feed.json
            data/out/latest/items.discovered.json
            data/out/latest/items.enriched.json
            data/out/latest/summary.md
            data/out/latest/diag.json

      - name: Post/update Daily Recommendations issue + comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const title = 'Daily Recommendations';
            let body = '';
            try { body = fs.readFileSync('data/out/latest/summary.md', 'utf8'); }
            catch { body = 'No summary.md found. Check debug snapshot/bundle.'; }

            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: 'daily-recos', per_page: 100
            });
            let issue = issues.find(i => i.title === title);
            if (!issue) {
              issue = (await github.rest.issues.create({ owner, repo, title, body, labels: ['daily-recos'] })).data;
            } else {
              await github.rest.issues.update({ owner, repo, issue_number: issue.number, body });
            }

            const mention = process.env.NOTIFY_USER ? ` cc @${process.env.NOTIFY_USER}` : '';
            await github.rest.issues.createComment({
              owner, repo, issue_number: issue.number,
              body: `Daily digest posted.${mention}\n\n` + body
            });

      # Save caches so next run restores an ever-growing pool
      - name: Save pool/tmdb caches
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            data/cache/pool
            data/cache/tmdb
          key: pool-${{ runner.os }}-${{ env.REGION }}-${{ env.POOL_CACHE_VERSION }}-${{ github.run_id }}