name: Nightly / Run Engine

on:
  workflow_dispatch: {}
  schedule:
    - cron: "15 3 * * *"  # 03:15 UTC daily (adjust as you like)

permissions:
  contents: read
  issues: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      IMDB_USER_ID: ${{ secrets.IMDB_USER_ID }}       # e.g., ur18684433  (or set IMDB_RATINGS_URL instead)
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
      OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
      IMDB_RATINGS_CSV_PATH: data/ratings.csv         # your uploaded CSV baseline
      # Tuning knobs (optional):
      TMDB_PAGES_MOVIE: "5"        # discovery pages for movies
      TMDB_PAGES_TV: "5"           # discovery pages for series
      INCLUDE_TV_SEASONS: "true"   # fetch tv details to count seasons (more API calls)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run engine
        run: python -m engine.runner

      - name: Upload results (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: recs-${{ github.run_id }}
          path: |
            data/out/daily/**

      - name: Post GitHub Issue (mobile push)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'data/out/daily';
            const days = fs.readdirSync(path).sort();
            if (days.length === 0) {
              core.setFailed('No output folder found');
              return;
            }
            const dayDir = `${path}/${days[days.length-1]}`;
            const recs = JSON.parse(fs.readFileSync(`${dayDir}/recs.json`, 'utf8'));
            const tel  = JSON.parse(fs.readFileSync(`${dayDir}/telemetry.json`, 'utf8'));

            function fmtItem(i, r) {
              const y = r.year || '';
              const t = r.type || '';
              const m = r.match?.toFixed ? r.match.toFixed(1) : r.match;
              return `${i}. ${m} â€” ${r.title} (${y}) [${t}]`;
            }
            const top = (recs.recs || []).slice(0, 10).map((r, i) => fmtItem(i+1, r)).join('\n');

            const body = [
              `Run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              'Top 10',
              top || '(no results)',
              `Telemetry: pool=${tel.eligible_unseen}, considered=${tel.considered}, shortlist=${tel.shortlist}, shown=${tel.shown}`,
              '',
              'This product uses the TMDB API but is not endorsed or certified by TMDB.'
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Latest recommendations',
              body
            });